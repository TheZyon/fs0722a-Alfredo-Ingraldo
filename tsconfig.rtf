{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red23\green23\blue23;\red140\green211\blue254;
\red89\green138\blue67;\red194\green126\blue101;\red70\green137\blue204;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c11765\c11765\c11765;\cssrgb\c61176\c86275\c99608;
\cssrgb\c41569\c60000\c33333;\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\{\cb1 \
\cb3   \cf4 "compilerOptions"\cf2 : \{\cb1 \
\cb3     \cf5 /* Visit https://aka.ms/tsconfig to read more about this file */\cf2 \cb1 \
\
\cb3     \cf5 /* Projects */\cf2 \cb1 \
\cb3     \cf5 // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\cf2 \cb1 \
\cb3     \cf5 // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\cf2 \cb1 \
\cb3     \cf5 // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */\cf2 \cb1 \
\cb3     \cf5 // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\cf2 \cb1 \
\cb3     \cf5 // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */\cf2 \cb1 \
\cb3     \cf5 // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\cf2 \cb1 \
\
\cb3     \cf5 /* Language and Environment */\cf2 \cb1 \
\cb3     \cf4 "target"\cf2 : \cf6 "ESNext"\cf2 ,                                  \cf5 /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\cf2 \cb1 \
\cb3     \cf5 // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\cf2 \cb1 \
\cb3     \cf5 // "jsx": "preserve",                                /* Specify what JSX code is generated. */\cf2 \cb1 \
\cb3     \cf5 // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\cf2 \cb1 \
\cb3     \cf5 // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */\cf2 \cb1 \
\cb3     \cf5 // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\cf2 \cb1 \
\cb3     \cf5 // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\cf2 \cb1 \
\cb3     \cf5 // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\cf2 \cb1 \
\cb3     \cf5 // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\cf2 \cb1 \
\cb3     \cf5 // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */\cf2 \cb1 \
\cb3     \cf5 // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */\cf2 \cb1 \
\cb3     \cf5 // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */\cf2 \cb1 \
\
\cb3     \cf5 /* Modules */\cf2 \cb1 \
\cb3     \cf4 "module"\cf2 : \cf6 "ESNext"\cf2 ,                                \cf5 /* Specify what module code is generated. */\cf2 \cb1 \
\cb3     \cf4 "rootDir"\cf2 : \cf6 "../TS"\cf2 ,                                  \cf5 /* Specify the root folder within your source files. */\cf2 \cb1 \
\cb3     \cf5 // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */\cf2 \cb1 \
\cb3     \cf5 // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */\cf2 \cb1 \
\cb3     \cf5 // "paths": \{\},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\cf2 \cb1 \
\cb3     \cf5 // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\cf2 \cb1 \
\cb3     \cf5 // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\cf2 \cb1 \
\cb3     \cf5 // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */\cf2 \cb1 \
\cb3     \cf5 // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */\cf2 \cb1 \
\cb3     \cf5 // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */\cf2 \cb1 \
\cb3     \cf5 // "resolveJsonModule": true,                        /* Enable importing .json files. */\cf2 \cb1 \
\cb3     \cf5 // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\cf2 \cb1 \
\
\cb3     \cf5 /* JavaScript Support */\cf2 \cb1 \
\cb3     \cf5 // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\cf2 \cb1 \
\cb3     \cf5 // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */\cf2 \cb1 \
\cb3     \cf5 // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\cf2 \cb1 \
\
\cb3     \cf5 /* Emit */\cf2 \cb1 \
\cb3     \cf5 // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\cf2 \cb1 \
\cb3     \cf5 // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */\cf2 \cb1 \
\cb3     \cf5 // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */\cf2 \cb1 \
\cb3     \cf5 // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */\cf2 \cb1 \
\cb3     \cf5 // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\cf2 \cb1 \
\cb3     \cf4 "outDir"\cf2 : \cf6 "../JS"\cf2 ,                                   \cf5 /* Specify an output folder for all emitted files. */\cf2 \cb1 \
\cb3     \cf5 // "removeComments": true,                           /* Disable emitting comments. */\cf2 \cb1 \
\cb3     \cf5 // "noEmit": true,                                   /* Disable emitting files from a compilation. */\cf2 \cb1 \
\cb3     \cf5 // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\cf2 \cb1 \
\cb3     \cf5 // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */\cf2 \cb1 \
\cb3     \cf5 // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\cf2 \cb1 \
\cb3     \cf5 // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */\cf2 \cb1 \
\cb3     \cf5 // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\cf2 \cb1 \
\cb3     \cf5 // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */\cf2 \cb1 \
\cb3     \cf5 // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\cf2 \cb1 \
\cb3     \cf5 // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\cf2 \cb1 \
\cb3     \cf5 // "newLine": "crlf",                                /* Set the newline character for emitting files. */\cf2 \cb1 \
\cb3     \cf5 // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\cf2 \cb1 \
\cb3     \cf5 // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\cf2 \cb1 \
\cb3     \cf5 // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */\cf2 \cb1 \
\cb3     \cf5 // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */\cf2 \cb1 \
\cb3     \cf5 // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */\cf2 \cb1 \
\cb3     \cf5 // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\cf2 \cb1 \
\
\cb3     \cf5 /* Interop Constraints */\cf2 \cb1 \
\cb3     \cf5 // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\cf2 \cb1 \
\cb3     \cf5 // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\cf2 \cb1 \
\cb3     \cf4 "esModuleInterop"\cf2 : \cf7 true\cf2 ,                             \cf5 /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\cf2 \cb1 \
\cb3     \cf5 // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\cf2 \cb1 \
\cb3     \cf4 "forceConsistentCasingInFileNames"\cf2 : \cf7 true\cf2 ,            \cf5 /* Ensure that casing is correct in imports. */\cf2 \cb1 \
\
\cb3     \cf5 /* Type Checking */\cf2 \cb1 \
\cb3     \cf4 "strict"\cf2 : \cf7 true\cf2 ,                                      \cf5 /* Enable all strict type-checking options. */\cf2 \cb1 \
\cb3     \cf5 // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\cf2 \cb1 \
\cb3     \cf5 // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */\cf2 \cb1 \
\cb3     \cf5 // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\cf2 \cb1 \
\cb3     \cf5 // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\cf2 \cb1 \
\cb3     \cf5 // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */\cf2 \cb1 \
\cb3     \cf5 // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\cf2 \cb1 \
\cb3     \cf5 // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\cf2 \cb1 \
\cb3     \cf5 // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */\cf2 \cb1 \
\cb3     \cf5 // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */\cf2 \cb1 \
\cb3     \cf5 // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */\cf2 \cb1 \
\cb3     \cf5 // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\cf2 \cb1 \
\cb3     \cf5 // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\cf2 \cb1 \
\cb3     \cf5 // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */\cf2 \cb1 \
\cb3     \cf5 // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */\cf2 \cb1 \
\cb3     \cf5 // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\cf2 \cb1 \
\cb3     \cf5 // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\cf2 \cb1 \
\cb3     \cf5 // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */\cf2 \cb1 \
\cb3     \cf5 // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */\cf2 \cb1 \
\
\cb3     \cf5 /* Completeness */\cf2 \cb1 \
\cb3     \cf5 // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\cf2 \cb1 \
\cb3     \cf4 "skipLibCheck"\cf2 : \cf7 true\cf2                                  \cf5 /* Skip type checking all .d.ts files. */\cf2 \cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
}